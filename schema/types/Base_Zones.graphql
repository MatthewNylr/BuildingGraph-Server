
type Zone implements AbstractElement @additionalLabels(labels: ["AbstractElement"])
{
  Id: ID!
  Name: String! 
  AllElements: [AbstractElement] @relation(name:"IS_IN_SPACE",direction:IN)
  ElementType: ElementType @relation(name:"IS_OF",direction:OUT)
  ModelElements: [ModelElement] @relation(name:"REALIZED_BY",direction:OUT)
  Spaces: [Space] @relation(name:"IS_IN_ZONE",direction:IN)
}

type Space {
  Zone: Zone @relation(name:"IS_IN_ZONE",direction:OUT)
}


##mutations to merge spaces and elements
type Mutation {
    Add_Space_IS_IN_ZONE_Zone(fromId:ID! toId:ID!) : String @cypher(statement:"MATCH (frn:Space {Id: $fromId}),(ton:Space {Id: $toId}) MERGE (frn)-[r:IS_IN_ZONE]->(ton)")   
    Remove_Space_IS_IN_Zone_Zone(fromId:ID! toId:ID!) : String @cypher(statement:"MATCH (frn:Space {Id: $fromId})-[r:IS_IN_ZONE]->(ton {Id: $toId}) DELETE r")
}
